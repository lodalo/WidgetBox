0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install' ]
2 info using npm@1.4.4
3 info using node@v0.10.22
4 warn package.json widgetbox@0.0.0 No description
5 warn package.json widgetbox@0.0.0 No repository field.
6 warn package.json widgetbox@0.0.0 No README data
7 verbose readDependencies using package.json deps
8 verbose install where, deps [ '/Volumes/wnpdev/widgetbox',
8 verbose install   [ 'grunt',
8 verbose install     'grunt-contrib-copy',
8 verbose install     'grunt-contrib-concat',
8 verbose install     'grunt-contrib-uglify',
8 verbose install     'grunt-contrib-compass',
8 verbose install     'grunt-contrib-jshint',
8 verbose install     'grunt-contrib-cssmin',
8 verbose install     'grunt-contrib-connect',
8 verbose install     'grunt-contrib-clean',
8 verbose install     'grunt-contrib-htmlmin',
8 verbose install     'grunt-bower-install',
8 verbose install     'grunt-contrib-imagemin',
8 verbose install     'grunt-contrib-watch',
8 verbose install     'grunt-rev',
8 verbose install     'grunt-autoprefixer',
8 verbose install     'grunt-usemin',
8 verbose install     'grunt-mocha',
8 verbose install     'grunt-modernizr',
8 verbose install     'grunt-newer',
8 verbose install     'grunt-svgmin',
8 verbose install     'grunt-concurrent',
8 verbose install     'load-grunt-tasks',
8 verbose install     'time-grunt',
8 verbose install     'jshint-stylish' ] ]
9 info preinstall widgetbox@0.0.0
10 verbose readDependencies using package.json deps
11 verbose already installed skipping grunt-contrib-concat@~0.3.0 /Volumes/wnpdev/widgetbox
12 verbose already installed skipping grunt@~0.4.1 /Volumes/wnpdev/widgetbox
13 verbose already installed skipping grunt-contrib-copy@~0.4.1 /Volumes/wnpdev/widgetbox
14 verbose already installed skipping grunt-contrib-uglify@~0.2.0 /Volumes/wnpdev/widgetbox
15 verbose already installed skipping grunt-contrib-compass@~0.7.0 /Volumes/wnpdev/widgetbox
16 verbose already installed skipping grunt-contrib-jshint@~0.7.0 /Volumes/wnpdev/widgetbox
17 verbose already installed skipping grunt-contrib-cssmin@~0.7.0 /Volumes/wnpdev/widgetbox
18 verbose already installed skipping grunt-contrib-connect@~0.5.0 /Volumes/wnpdev/widgetbox
19 verbose already installed skipping grunt-contrib-clean@~0.5.0 /Volumes/wnpdev/widgetbox
20 verbose already installed skipping grunt-contrib-htmlmin@~0.1.3 /Volumes/wnpdev/widgetbox
21 verbose already installed skipping grunt-bower-install@~1.0.0 /Volumes/wnpdev/widgetbox
22 verbose already installed skipping grunt-contrib-imagemin@~0.5.0 /Volumes/wnpdev/widgetbox
23 verbose already installed skipping grunt-contrib-watch@~0.5.2 /Volumes/wnpdev/widgetbox
24 verbose already installed skipping grunt-rev@~0.1.0 /Volumes/wnpdev/widgetbox
25 verbose already installed skipping grunt-autoprefixer@~0.5.0 /Volumes/wnpdev/widgetbox
26 verbose already installed skipping grunt-usemin@~2.0.0 /Volumes/wnpdev/widgetbox
27 verbose already installed skipping grunt-mocha@~0.4.0 /Volumes/wnpdev/widgetbox
28 verbose already installed skipping grunt-modernizr@~0.4.0 /Volumes/wnpdev/widgetbox
29 verbose already installed skipping grunt-svgmin@~0.2.0 /Volumes/wnpdev/widgetbox
30 verbose cache add [ 'grunt-newer@~0.6.0', null ]
31 verbose cache add name=undefined spec="grunt-newer@~0.6.0" args=["grunt-newer@~0.6.0",null]
32 verbose parsed url { protocol: null,
32 verbose parsed url   slashes: null,
32 verbose parsed url   auth: null,
32 verbose parsed url   host: null,
32 verbose parsed url   port: null,
32 verbose parsed url   hostname: null,
32 verbose parsed url   hash: null,
32 verbose parsed url   search: null,
32 verbose parsed url   query: null,
32 verbose parsed url   pathname: 'grunt-newer@~0.6.0',
32 verbose parsed url   path: 'grunt-newer@~0.6.0',
32 verbose parsed url   href: 'grunt-newer@~0.6.0' }
33 verbose cache add name="grunt-newer" spec="~0.6.0" args=["grunt-newer","~0.6.0"]
34 verbose parsed url { protocol: null,
34 verbose parsed url   slashes: null,
34 verbose parsed url   auth: null,
34 verbose parsed url   host: null,
34 verbose parsed url   port: null,
34 verbose parsed url   hostname: null,
34 verbose parsed url   hash: null,
34 verbose parsed url   search: null,
34 verbose parsed url   query: null,
34 verbose parsed url   pathname: '~0.6.0',
34 verbose parsed url   path: '~0.6.0',
34 verbose parsed url   href: '~0.6.0' }
35 verbose addNamed [ 'grunt-newer', '~0.6.0' ]
36 verbose addNamed [ null, '>=0.6.0-0 <0.7.0-0' ]
37 verbose already installed skipping grunt-concurrent@~0.4.0 /Volumes/wnpdev/widgetbox
38 silly lockFile c36710c7-grunt-newer-0-6-0 grunt-newer@~0.6.0
39 verbose lock grunt-newer@~0.6.0 /Users/dkj/.npm/c36710c7-grunt-newer-0-6-0.lock
40 verbose already installed skipping load-grunt-tasks@~0.2.0 /Volumes/wnpdev/widgetbox
41 silly addNameRange { name: 'grunt-newer',
41 silly addNameRange   range: '>=0.6.0-0 <0.7.0-0',
41 silly addNameRange   hasData: false }
42 verbose already installed skipping time-grunt@~0.2.0 /Volumes/wnpdev/widgetbox
43 verbose url raw grunt-newer
44 verbose url resolving [ 'https://registry.npmjs.org/', './grunt-newer' ]
45 verbose url resolved https://registry.npmjs.org/grunt-newer
46 info trying registry request attempt 1 at 20:18:43
47 verbose etag "2BIX9DQLWWH4VAMXOWHT5WW24"
48 http GET https://registry.npmjs.org/grunt-newer
49 verbose already installed skipping jshint-stylish@~0.1.3 /Volumes/wnpdev/widgetbox
50 http 304 https://registry.npmjs.org/grunt-newer
51 silly registry.get cb [ 304,
51 silly registry.get   { date: 'Thu, 27 Mar 2014 00:18:44 GMT',
51 silly registry.get     server: 'Apache',
51 silly registry.get     via: '1.1 varnish',
51 silly registry.get     'last-modified': 'Thu, 27 Mar 2014 00:18:44 GMT',
51 silly registry.get     'cache-control': 'max-age=1',
51 silly registry.get     etag: '"2BIX9DQLWWH4VAMXOWHT5WW24"',
51 silly registry.get     'x-served-by': 'cache-d45-DAL',
51 silly registry.get     'x-cache': 'MISS',
51 silly registry.get     'x-cache-hits': '0',
51 silly registry.get     'x-timer': 'S1395879524.684411764,VS0,VE117',
51 silly registry.get     vary: 'Accept',
51 silly registry.get     'content-length': '0',
51 silly registry.get     'keep-alive': 'timeout=10, max=50',
51 silly registry.get     connection: 'Keep-Alive' } ]
52 verbose etag grunt-newer from cache
53 silly addNameRange number 2 { name: 'grunt-newer',
53 silly addNameRange   range: '>=0.6.0-0 <0.7.0-0',
53 silly addNameRange   hasData: true }
54 silly addNameRange versions [ 'grunt-newer',
54 silly addNameRange   [ '0.1.0',
54 silly addNameRange     '0.2.0',
54 silly addNameRange     '0.3.1',
54 silly addNameRange     '0.4.0',
54 silly addNameRange     '0.4.1',
54 silly addNameRange     '0.5.0',
54 silly addNameRange     '0.5.1',
54 silly addNameRange     '0.5.2',
54 silly addNameRange     '0.5.3',
54 silly addNameRange     '0.5.4',
54 silly addNameRange     '0.6.0',
54 silly addNameRange     '0.6.1',
54 silly addNameRange     '0.7.0' ] ]
55 verbose addNamed [ 'grunt-newer', '0.6.1' ]
56 verbose addNamed [ '0.6.1', '0.6.1' ]
57 silly lockFile 4133666c-grunt-newer-0-6-1 grunt-newer@0.6.1
58 verbose lock grunt-newer@0.6.1 /Users/dkj/.npm/4133666c-grunt-newer-0-6-1.lock
59 silly lockFile 4133666c-grunt-newer-0-6-1 grunt-newer@0.6.1
60 silly lockFile 4133666c-grunt-newer-0-6-1 grunt-newer@0.6.1
61 silly lockFile c36710c7-grunt-newer-0-6-0 grunt-newer@~0.6.0
62 silly lockFile c36710c7-grunt-newer-0-6-0 grunt-newer@~0.6.0
63 silly resolved [ { name: 'grunt-newer',
63 silly resolved     description: 'Run Grunt tasks with only those source files modified since the last successful run.',
63 silly resolved     version: '0.6.1',
63 silly resolved     homepage: 'https://github.com/tschaub/grunt-newer',
63 silly resolved     author: { name: 'Tim Schaub', url: 'http://tschaub.net/' },
63 silly resolved     repository: { type: 'git', url: 'git://github.com/tschaub/grunt-newer.git' },
63 silly resolved     bugs: { url: 'https://github.com/tschaub/grunt-newer/issues' },
63 silly resolved     licenses: [ [Object] ],
63 silly resolved     main: 'gruntfile.js',
63 silly resolved     engines: { node: '>= 0.8.0' },
63 silly resolved     scripts: { test: 'grunt test', start: 'grunt test watch' },
63 silly resolved     devDependencies:
63 silly resolved      { grunt: '0.4.2',
63 silly resolved        'grunt-cli': '0.1.11',
63 silly resolved        'grunt-contrib-watch': '0.5.3',
63 silly resolved        'grunt-contrib-jshint': '0.7.2',
63 silly resolved        chai: '1.8.1',
63 silly resolved        'grunt-cafe-mocha': '0.1.10',
63 silly resolved        wrench: '1.5.4',
63 silly resolved        tmp: '0.0.21',
63 silly resolved        'grunt-contrib-clean': '0.5.0',
63 silly resolved        'mock-fs': '2.x' },
63 silly resolved     peerDependencies: { grunt: '~0.4.1' },
63 silly resolved     keywords: [ 'gruntplugin', 'grunt', 'newer', 'files' ],
63 silly resolved     dependencies: { async: '0.2.9', rimraf: '2.2.4' },
63 silly resolved     readme: '# grunt-newer\n\nConfigure [Grunt](http://gruntjs.com/) tasks to run with newer files only.\n\n**Synopsis:**  The [`newer`](#newer) task will configure another task to run with `src` files that are *a)* newer than the `dest` files or *b)* newer than the last successful run (if there are no `dest` files).  See below for examples and more detail.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven\'t used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [`gruntfile.js`](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you\'re familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-newer --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your `gruntfile.js` with this line:\n\n```js\ngrunt.loadNpmTasks(\'grunt-newer\');\n```\n\n<a name="newer"></a>\n## The `newer` task\n\nThe `newer` task doesn\'t require any special configuration.  To use it, just add `newer` as the first argument when running other tasks.\n\nFor example, if you want to use [Uglify](https://npmjs.org/package/grunt-contrib-uglify) to minify your source files only when one or more of them is newer than the previously minified destination file, configure the `uglify` task as you would otherwise, and then register a task with `newer` at the front.\n\n```js\n  grunt.initConfig({\n    uglify: {\n      all: {\n        files: {\n          \'dest/app.min.js\': [\'src/**/*.js\']\n        }\n      }\n    }\n  });\n\n  grunt.loadNpmTasks(\'grunt-contrib-uglify\');\n  grunt.loadNpmTasks(\'grunt-newer\');\n\n  grunt.registerTask(\'minify\', [\'newer:uglify:all\']);\n```\n\nWith the above configuration the `minify` task will only run `uglify` if one or more of the `src/**/*.js` files is newer than the `dest/app.min.js` file.\n\nThe above example shows how the `newer` task works with other tasks that specify both `src` and `dest` files.  In this case, the modification time of `src` files are compared to modification times of corresponding `dest` files to determine which `src` files to include.\n\nThe `newer` task can also be used with tasks that don\'t generate any `dest` files.  In this case, `newer` will only use files that are newer than the last successful run of the same task.\n\nFor example, if you want to run [JSHint](https://npmjs.org/package/grunt-contrib-jshint) on only those files that have been modified since the last successful run, configure the `jshint` task as you would otherwise, and then register a task with `newer` at the front.\n\n```js\n  grunt.initConfig({\n    jshint: {\n      options: {\n        jshintrc: \'.jshintrc\'\n      },\n      all: {\n        src: \'src/**/*.js\'\n      }\n    }\n  });\n\n  grunt.loadNpmTasks(\'grunt-contrib-jshint\');\n  grunt.loadNpmTasks(\'grunt-newer\');\n\n  grunt.registerTask(\'lint\', [\'newer:jshint:all\']);\n```\n\nWith the above configuration, running `grunt lint` will configure your `jshint:all` task to use only files in the `jshint.all.src` config that have been modified since the last successful run of the same task.  The first time the `jshint:newer:all` task runs, all source files will be used.  After that, only the files you modify will be run through the linter.\n\nAnother example is to use the `newer` task in conjunction with `watch`.  For example, you might want to set up a watch to run a linter on all your `.js` files whenever one changes.  With the `newer` task, instead of re-running the linter on all files, you only need to run it on the files that changed.\n\n```js\n  var srcFiles = \'src/**/*.js\';\n\n  grunt.initConfig({\n    jshint: {\n      all: {\n        src: srcFiles\n      }\n    },\n    watch: {\n      all: {\n        files: srcFiles,\n        tasks: [\'newer:jshint:all\']\n      }\n    }\n  });\n\n  grunt.loadNpmTasks(\'grunt-contrib-jshint\');\n  grunt.loadNpmTasks(\'grunt-contrib-watch\');\n  grunt.loadNpmTasks(\'grunt-newer\');\n\n```\n\nWith the above configuration, running `grunt jshint watch` will first lint all your files with `jshint` and then set up a watch.  Whenever one of your source files changes, the `jshint` task will be run on just the modified file.\n\n*Note:* If your task is configured with `dest` files, `newer` will run your task with only those files that are newer than the corresponding `dest` files.\n\n## Options for the `newer` task\n\nIn most cases, you shouldn\'t need to add any special configuration for the `newer` task.  Just `grunt.loadNpmTasks(\'grunt-newer\')` and you can use `newer` as a prefix to your other tasks.  The single option below is available if you need a custom configuration.\n\n#### <a id="optionscache">options.cache</a>\n * type: `string`\n * default: `node_modules/grunt-newer/.cache`\n\nTo keep track of timestamps for successful runs, the `newer` task writes to a cache directory.  The default is to use a `.cache` directory within the `grunt-newer` installation directory.  If you need timestamp info to be written to a different location, configure the task with a `cache` option.\n\nExample use of the `cache` option:\n\n```js\n  grunt.initConfig({\n    newer: {\n      options: {\n        cache: \'path/to/custom/cache/directory\'\n      }\n    }\n  });\n```\n\n## That\'s it\n\nPlease [submit an issue](https://github.com/tschaub/grunt-newer/issues) if you encounter any trouble.  Contributions or suggestions for improvements welcome!\n\n[![Current Status](https://secure.travis-ci.org/tschaub/grunt-newer.png?branch=master)](https://travis-ci.org/tschaub/grunt-newer)\n\n## Known limitations\n\nThe `newer` task relies on Grunt\'s convention for specifying [`src`/`dest` mappings](http://gruntjs.com/configuring-tasks#files).  So it should be expected to work with two types of tasks:\n\n1) Tasks that specify both `src` and `dest` files.  In this case, the task prefixed by `newer` will be configured to run with `src` files that are newer than the corresponding `dest` file (based on the `mtime` of files).\n\n2) Tasks that specify only `src` files.  In this case, the task prefixed by `newer` will be configured to run with `src` files that are newer than the previous successful run of the same task.\n\nThe `newer` task will *not* work as a prefix for the following tasks:\n\n * [`grunt-rsync`](http://npmjs.org/package/grunt-rsync) - Though this task specifies `src` and `dest` files, the `dest` file is not generated based on `src` files (instead it is a directory).\n\n * [`grunt-spritesmith`](https://npmjs.org/package/grunt-spritesmith) - This task uses multiple `src` images to produce `destImg` and `destCSS` files.  Instead use the [`grunt-spritely`](https://npmjs.org/package/grunt-spritely) task configured with `src` and `dest` files.\n',
63 silly resolved     readmeFilename: 'README.md',
63 silly resolved     _id: 'grunt-newer@0.6.1',
63 silly resolved     _from: 'grunt-newer@~0.6.0' } ]
64 info install grunt-newer@0.6.1 into /Volumes/wnpdev/widgetbox
65 info installOne grunt-newer@0.6.1
66 info /Volumes/wnpdev/widgetbox/node_modules/grunt-newer unbuild
67 verbose tar unpack /Users/dkj/.npm/grunt-newer/0.6.1/package.tgz
68 silly lockFile e44d2cdf-dgetbox-node-modules-grunt-newer tar:///Volumes/wnpdev/widgetbox/node_modules/grunt-newer
69 verbose lock tar:///Volumes/wnpdev/widgetbox/node_modules/grunt-newer /Users/dkj/.npm/e44d2cdf-dgetbox-node-modules-grunt-newer.lock
70 silly lockFile 7ebfba14-pm-grunt-newer-0-6-1-package-tgz tar:///Users/dkj/.npm/grunt-newer/0.6.1/package.tgz
71 verbose lock tar:///Users/dkj/.npm/grunt-newer/0.6.1/package.tgz /Users/dkj/.npm/7ebfba14-pm-grunt-newer-0-6-1-package-tgz.lock
72 silly gunzTarPerm modes [ '755', '644' ]
73 silly gunzTarPerm extractEntry package.json
74 silly gunzTarPerm extractEntry .npmignore
75 silly gunzTarPerm extractEntry README.md
76 silly gunzTarPerm extractEntry gruntfile.js
77 silly gunzTarPerm extractEntry changelog.md
78 silly gunzTarPerm extractEntry .jshintrc
79 silly gunzTarPerm extractEntry LICENSE-MIT
80 silly gunzTarPerm extractEntry lib/util.js
81 silly gunzTarPerm extractEntry .cache/jshint/fixturesJs/timestamp
82 silly gunzTarPerm extractEntry .cache/jshint/gruntfile/timestamp
83 silly gunzTarPerm extractEntry .cache/jshint/tasks/timestamp
84 silly gunzTarPerm extractEntry .cache/jshint/tests/timestamp
85 silly gunzTarPerm extractEntry .cache/log/all/timestamp
86 silly gunzTarPerm extractEntry tasks/newer.js
87 silly gunzTarPerm extractEntry test/helper.js
88 silly gunzTarPerm extractEntry test/.jshintrc
89 silly gunzTarPerm extractEntry test/integration/newer-clean-dest.spec.js
90 silly gunzTarPerm extractEntry test/integration/newer-dest.spec.js
91 silly gunzTarPerm extractEntry test/integration/newer-modify-none.spec.js
92 silly gunzTarPerm extractEntry test/integration/newer-modify-one.spec.js
93 silly gunzTarPerm extractEntry test/integration/newer-reconfigure.spec.js
94 silly gunzTarPerm extractEntry test/integration/fixtures/newer-clean-dest/gruntfile.js
95 silly gunzTarPerm extractEntry test/integration/fixtures/newer-clean-dest/src/one.coffee
96 silly gunzTarPerm extractEntry test/integration/fixtures/newer-clean-dest/src/two.coffee
97 silly gunzTarPerm extractEntry test/integration/fixtures/newer-dest/gruntfile.js
98 silly gunzTarPerm extractEntry test/integration/fixtures/newer-dest/src/one.coffee
99 silly gunzTarPerm extractEntry test/integration/fixtures/newer-dest/src/two.coffee
100 silly gunzTarPerm extractEntry test/integration/fixtures/newer-modify-none/gruntfile.js
101 silly gunzTarPerm extractEntry test/integration/fixtures/newer-modify-none/src/one.js
102 silly gunzTarPerm extractEntry test/integration/fixtures/newer-modify-none/src/two.js
103 silly gunzTarPerm extractEntry test/integration/fixtures/newer-modify-one/gruntfile.js
104 silly gunzTarPerm extractEntry test/integration/fixtures/newer-modify-one/src/one.js
105 silly gunzTarPerm extractEntry test/integration/fixtures/newer-modify-one/src/two.js
106 silly gunzTarPerm extractEntry test/integration/fixtures/newer-reconfigure/gruntfile.js
107 silly gunzTarPerm extractEntry test/integration/fixtures/newer-reconfigure/src/one.coffee
108 silly gunzTarPerm extractEntry test/integration/fixtures/newer-reconfigure/src/two.coffee
109 silly gunzTarPerm extractEntry test/integration/tasks/index.js
110 silly gunzTarPerm extractEntry test/lib/util.spec.js
111 silly lockFile e44d2cdf-dgetbox-node-modules-grunt-newer tar:///Volumes/wnpdev/widgetbox/node_modules/grunt-newer
112 silly lockFile e44d2cdf-dgetbox-node-modules-grunt-newer tar:///Volumes/wnpdev/widgetbox/node_modules/grunt-newer
113 silly lockFile 7ebfba14-pm-grunt-newer-0-6-1-package-tgz tar:///Users/dkj/.npm/grunt-newer/0.6.1/package.tgz
114 silly lockFile 7ebfba14-pm-grunt-newer-0-6-1-package-tgz tar:///Users/dkj/.npm/grunt-newer/0.6.1/package.tgz
115 info preinstall grunt-newer@0.6.1
116 verbose readDependencies using package.json deps
117 verbose readDependencies using package.json deps
118 verbose cache add [ 'async@0.2.9', null ]
119 verbose cache add name=undefined spec="async@0.2.9" args=["async@0.2.9",null]
120 verbose parsed url { protocol: null,
120 verbose parsed url   slashes: null,
120 verbose parsed url   auth: null,
120 verbose parsed url   host: null,
120 verbose parsed url   port: null,
120 verbose parsed url   hostname: null,
120 verbose parsed url   hash: null,
120 verbose parsed url   search: null,
120 verbose parsed url   query: null,
120 verbose parsed url   pathname: 'async@0.2.9',
120 verbose parsed url   path: 'async@0.2.9',
120 verbose parsed url   href: 'async@0.2.9' }
121 verbose cache add name="async" spec="0.2.9" args=["async","0.2.9"]
122 verbose parsed url { protocol: null,
122 verbose parsed url   slashes: null,
122 verbose parsed url   auth: null,
122 verbose parsed url   host: null,
122 verbose parsed url   port: null,
122 verbose parsed url   hostname: null,
122 verbose parsed url   hash: null,
122 verbose parsed url   search: null,
122 verbose parsed url   query: null,
122 verbose parsed url   pathname: '0.2.9',
122 verbose parsed url   path: '0.2.9',
122 verbose parsed url   href: '0.2.9' }
123 verbose addNamed [ 'async', '0.2.9' ]
124 verbose addNamed [ '0.2.9', '0.2.9' ]
125 silly lockFile be62480b-async-0-2-9 async@0.2.9
126 verbose lock async@0.2.9 /Users/dkj/.npm/be62480b-async-0-2-9.lock
127 verbose cache add [ 'rimraf@2.2.4', null ]
128 verbose cache add name=undefined spec="rimraf@2.2.4" args=["rimraf@2.2.4",null]
129 verbose parsed url { protocol: null,
129 verbose parsed url   slashes: null,
129 verbose parsed url   auth: null,
129 verbose parsed url   host: null,
129 verbose parsed url   port: null,
129 verbose parsed url   hostname: null,
129 verbose parsed url   hash: null,
129 verbose parsed url   search: null,
129 verbose parsed url   query: null,
129 verbose parsed url   pathname: 'rimraf@2.2.4',
129 verbose parsed url   path: 'rimraf@2.2.4',
129 verbose parsed url   href: 'rimraf@2.2.4' }
130 verbose cache add name="rimraf" spec="2.2.4" args=["rimraf","2.2.4"]
131 verbose parsed url { protocol: null,
131 verbose parsed url   slashes: null,
131 verbose parsed url   auth: null,
131 verbose parsed url   host: null,
131 verbose parsed url   port: null,
131 verbose parsed url   hostname: null,
131 verbose parsed url   hash: null,
131 verbose parsed url   search: null,
131 verbose parsed url   query: null,
131 verbose parsed url   pathname: '2.2.4',
131 verbose parsed url   path: '2.2.4',
131 verbose parsed url   href: '2.2.4' }
132 verbose addNamed [ 'rimraf', '2.2.4' ]
133 verbose addNamed [ '2.2.4', '2.2.4' ]
134 silly lockFile 7e090252-rimraf-2-2-4 rimraf@2.2.4
135 verbose lock rimraf@2.2.4 /Users/dkj/.npm/7e090252-rimraf-2-2-4.lock
136 verbose url raw async/0.2.9
137 verbose url resolving [ 'https://registry.npmjs.org/', './async/0.2.9' ]
138 verbose url resolved https://registry.npmjs.org/async/0.2.9
139 info trying registry request attempt 1 at 20:18:44
140 verbose etag "732OYU2M9BBG51YOUOLZSDI5Q"
141 http GET https://registry.npmjs.org/async/0.2.9
142 verbose url raw rimraf/2.2.4
143 verbose url resolving [ 'https://registry.npmjs.org/', './rimraf/2.2.4' ]
144 verbose url resolved https://registry.npmjs.org/rimraf/2.2.4
145 info trying registry request attempt 1 at 20:18:44
146 verbose etag "C1IFULZSRV1NCLUW5A8622O46"
147 http GET https://registry.npmjs.org/rimraf/2.2.4
148 http 304 https://registry.npmjs.org/rimraf/2.2.4
149 silly registry.get cb [ 304,
149 silly registry.get   { date: 'Thu, 27 Mar 2014 00:18:45 GMT',
149 silly registry.get     server: 'Apache',
149 silly registry.get     via: '1.1 varnish',
149 silly registry.get     'last-modified': 'Thu, 27 Mar 2014 00:18:45 GMT',
149 silly registry.get     'cache-control': 'max-age=1',
149 silly registry.get     etag: '"C1IFULZSRV1NCLUW5A8622O46"',
149 silly registry.get     'x-served-by': 'cache-d98-DAL',
149 silly registry.get     'x-cache': 'MISS',
149 silly registry.get     'x-cache-hits': '0',
149 silly registry.get     'x-timer': 'S1395879525.179557085,VS0,VE34',
149 silly registry.get     vary: 'Accept',
149 silly registry.get     'content-length': '0',
149 silly registry.get     'keep-alive': 'timeout=10, max=50',
149 silly registry.get     connection: 'Keep-Alive' } ]
150 verbose etag rimraf/2.2.4 from cache
151 silly lockFile 7e090252-rimraf-2-2-4 rimraf@2.2.4
152 silly lockFile 7e090252-rimraf-2-2-4 rimraf@2.2.4
153 http 304 https://registry.npmjs.org/async/0.2.9
154 silly registry.get cb [ 304,
154 silly registry.get   { date: 'Thu, 27 Mar 2014 00:18:45 GMT',
154 silly registry.get     server: 'Apache',
154 silly registry.get     via: '1.1 varnish',
154 silly registry.get     'last-modified': 'Thu, 27 Mar 2014 00:18:45 GMT',
154 silly registry.get     'cache-control': 'max-age=1',
154 silly registry.get     etag: '"732OYU2M9BBG51YOUOLZSDI5Q"',
154 silly registry.get     'x-served-by': 'cache-d46-DAL',
154 silly registry.get     'x-cache': 'MISS',
154 silly registry.get     'x-cache-hits': '0',
154 silly registry.get     'x-timer': 'S1395879525.178241491,VS0,VE55',
154 silly registry.get     vary: 'Accept',
154 silly registry.get     'content-length': '0',
154 silly registry.get     'keep-alive': 'timeout=10, max=50',
154 silly registry.get     connection: 'Keep-Alive' } ]
155 verbose etag async/0.2.9 from cache
156 silly lockFile be62480b-async-0-2-9 async@0.2.9
157 silly lockFile be62480b-async-0-2-9 async@0.2.9
158 silly resolved [ { name: 'rimraf',
158 silly resolved     version: '2.2.4',
158 silly resolved     main: 'rimraf.js',
158 silly resolved     description: 'A deep deletion module for node (like `rm -rf`)',
158 silly resolved     author:
158 silly resolved      { name: 'Isaac Z. Schlueter',
158 silly resolved        email: 'i@izs.me',
158 silly resolved        url: 'http://blog.izs.me/' },
158 silly resolved     license:
158 silly resolved      { type: 'MIT',
158 silly resolved        url: 'https://github.com/isaacs/rimraf/raw/master/LICENSE' },
158 silly resolved     optionalDependencies: { 'graceful-fs': '~2' },
158 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/rimraf.git' },
158 silly resolved     scripts: { test: 'cd test && bash run.sh' },
158 silly resolved     bin: { rimraf: './bin.js' },
158 silly resolved     contributors: [ [Object], [Object], [Object], [Object], [Object] ],
158 silly resolved     readme: '`rm -rf` for node.\n\nInstall with `npm install rimraf`, or just drop rimraf.js somewhere.\n\n## API\n\n`rimraf(f, callback)`\n\nThe callback will be called with an error if there is one.  Certain\nerrors are handled for you:\n\n* Windows: `EBUSY` and `ENOTEMPTY` - rimraf will back off a maximum of\n  `opts.maxBusyTries` times before giving up.\n* `ENOENT` - If the file doesn\'t exist, rimraf will return\n  successfully, since your desired outcome is already the case.\n\n## rimraf.sync\n\nIt can remove stuff synchronously, too.  But that\'s not so good.  Use\nthe async API.  It\'s better.\n\n## CLI\n\nIf installed with `npm install rimraf -g` it can be used as a global\ncommand `rimraf <path>` which is useful for cross platform support.\n\n## mkdirp\n\nIf you need to create a directory recursively, check out\n[mkdirp](https://github.com/substack/node-mkdirp).\n',
158 silly resolved     readmeFilename: 'README.md',
158 silly resolved     bugs: { url: 'https://github.com/isaacs/rimraf/issues' },
158 silly resolved     homepage: 'https://github.com/isaacs/rimraf',
158 silly resolved     dependencies: { 'graceful-fs': '~2' },
158 silly resolved     _id: 'rimraf@2.2.4',
158 silly resolved     _from: 'rimraf@2.2.4' },
158 silly resolved   { name: 'async',
158 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
158 silly resolved     main: './lib/async',
158 silly resolved     author: { name: 'Caolan McMahon' },
158 silly resolved     version: '0.2.9',
158 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
158 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
158 silly resolved     licenses: [ [Object] ],
158 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
158 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
158 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
158 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn\'t working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // \'home\' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it\'s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type="text/javascript" src="async.js"></script>\n<script type="text/javascript">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n<a name="each" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="forEachSeries" />\n<a name="eachSeries" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n<a name="eachLimit" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="mapLimit" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it\'s probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, \'one\');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, \'two\');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to [\'one\', \'two\']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'one\');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'two\');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal [\'one\',\'two\'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of "limit" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first "limit" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name="doWhilst" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name="doUntil" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name="forever" />\n### forever(fn, callback)\n\nCalls the asynchronous function \'fn\' repeatedly, in series, indefinitely.\nIf an error is passed to fn\'s callback then \'callback\' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, \'one\', \'two\');\n    },\n    function(arg1, arg2, callback){\n        callback(null, \'three\');\n    },\n    function(arg1, callback){\n        // arg1 now equals \'three\'\n        callback(null, \'done\');\n    }\n], function (err, result) {\n   // result now equals \'done\'    \n});\n```\n\n---------------------------------------\n<a name="compose" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name="applyEach" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], \'bucket\', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name="applyEachSeries" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log(\'hello \' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log(\'all items have been processed\');\n}\n\n// add some items to the queue\n\nq.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\nq.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n```\n\n---------------------------------------\n\n<a name="cargo" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log(\'hello \' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\ncargo.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\ncargo.push({name: \'baz\'}, function (err) {\n    console.log(\'finished processing baz\');\n});\n```\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, \'data.txt\', \'utf-8\');\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile(\'data.txt\', \'utf-8\', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile(\'data.txt\', \'utf-8\', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function\'s execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: [\'get_data\', \'make_folder\', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: [\'write_file\', function(callback, results){\n        // once the file is written let\'s email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let\'s email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It\'s also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p(\'one\'); },\n    function(){ sys.p(\'two\'); },\n    function(){ sys.p(\'three\'); }\n]);\n\nnode> var iterator2 = iterator();\n\'one\'\nnode> var iterator3 = iterator2();\n\'two\'\nnode> iterator3();\n\'three\'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n\'three\'\n```\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n    async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile(\'testfile1\', \'test1\', callback);\n    },\n    function(callback){\n        fs.writeFile(\'testfile2\', \'test2\', callback);\n    }\n]);\n```\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, \'one\');\nnode> fn(\'two\', \'three\');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push(\'two\');\n    // call_order now equals [\'one\',\'two\']\n});\ncall_order.push(\'one\')\n```\n\n<a name="times" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: \'user\' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name="timesSeries" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn(\'some name\', function () {\n    // callback\n});\n```\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, \'hello \' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, \'world\');\n\'hello world\'\n```\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, \'world\');\n{hello: \'world\'}\n```\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
158 silly resolved     readmeFilename: 'README.md',
158 silly resolved     homepage: 'https://github.com/caolan/async',
158 silly resolved     _id: 'async@0.2.9',
158 silly resolved     _from: 'async@0.2.9' } ]
159 info install rimraf@2.2.4 into /Volumes/wnpdev/widgetbox/node_modules/grunt-newer
160 info install async@0.2.9 into /Volumes/wnpdev/widgetbox/node_modules/grunt-newer
161 info installOne rimraf@2.2.4
162 info installOne async@0.2.9
163 info /Volumes/wnpdev/widgetbox/node_modules/grunt-newer/node_modules/rimraf unbuild
164 info /Volumes/wnpdev/widgetbox/node_modules/grunt-newer/node_modules/async unbuild
165 verbose tar unpack /Users/dkj/.npm/rimraf/2.2.4/package.tgz
166 silly lockFile ce372c5f--grunt-newer-node-modules-rimraf tar:///Volumes/wnpdev/widgetbox/node_modules/grunt-newer/node_modules/rimraf
167 verbose lock tar:///Volumes/wnpdev/widgetbox/node_modules/grunt-newer/node_modules/rimraf /Users/dkj/.npm/ce372c5f--grunt-newer-node-modules-rimraf.lock
168 silly lockFile 41a35bd4-dkj-npm-rimraf-2-2-4-package-tgz tar:///Users/dkj/.npm/rimraf/2.2.4/package.tgz
169 verbose lock tar:///Users/dkj/.npm/rimraf/2.2.4/package.tgz /Users/dkj/.npm/41a35bd4-dkj-npm-rimraf-2-2-4-package-tgz.lock
170 verbose tar unpack /Users/dkj/.npm/async/0.2.9/package.tgz
171 silly lockFile 655eb425-s-grunt-newer-node-modules-async tar:///Volumes/wnpdev/widgetbox/node_modules/grunt-newer/node_modules/async
172 verbose lock tar:///Volumes/wnpdev/widgetbox/node_modules/grunt-newer/node_modules/async /Users/dkj/.npm/655eb425-s-grunt-newer-node-modules-async.lock
173 silly lockFile 85a49123--dkj-npm-async-0-2-9-package-tgz tar:///Users/dkj/.npm/async/0.2.9/package.tgz
174 verbose lock tar:///Users/dkj/.npm/async/0.2.9/package.tgz /Users/dkj/.npm/85a49123--dkj-npm-async-0-2-9-package-tgz.lock
175 silly gunzTarPerm modes [ '755', '644' ]
176 silly lockFile 655eb425-s-grunt-newer-node-modules-async tar:///Volumes/wnpdev/widgetbox/node_modules/grunt-newer/node_modules/async
177 silly lockFile 655eb425-s-grunt-newer-node-modules-async tar:///Volumes/wnpdev/widgetbox/node_modules/grunt-newer/node_modules/async
178 silly lockFile 85a49123--dkj-npm-async-0-2-9-package-tgz tar:///Users/dkj/.npm/async/0.2.9/package.tgz
179 silly lockFile 85a49123--dkj-npm-async-0-2-9-package-tgz tar:///Users/dkj/.npm/async/0.2.9/package.tgz
180 info /Volumes/wnpdev/widgetbox/node_modules/grunt-newer/node_modules/async unbuild
181 verbose about to build /Volumes/wnpdev/widgetbox/node_modules/grunt-newer
182 info /Volumes/wnpdev/widgetbox/node_modules/grunt-newer unbuild
183 info preuninstall grunt-newer@0.6.1
184 info uninstall grunt-newer@0.6.1
185 verbose true,/Volumes/wnpdev/widgetbox/node_modules,/Volumes/wnpdev/widgetbox/node_modules unbuild grunt-newer@0.6.1
186 info postuninstall grunt-newer@0.6.1
187 error Error: ENOENT, open '/Volumes/wnpdev/widgetbox/node_modules/grunt-newer/node_modules/async/package.json'
188 error If you need help, you may report this *entire* log,
188 error including the npm and node versions, at:
188 error     <http://github.com/npm/npm/issues>
189 error System Darwin 13.1.0
190 error command "node" "/usr/local/bin/npm" "install"
191 error cwd /Volumes/wnpdev/widgetbox
192 error node -v v0.10.22
193 error npm -v 1.4.4
194 error path /Volumes/wnpdev/widgetbox/node_modules/grunt-newer/node_modules/async/package.json
195 error code ENOENT
196 error errno 34
197 verbose exit [ 34, true ]
